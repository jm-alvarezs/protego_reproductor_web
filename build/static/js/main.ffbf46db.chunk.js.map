{"version":3,"sources":["utils.js","Home.js","serviceWorker.js","index.js","App.js"],"names":["console","log","process","tipo","BASE_URL","Home","url","this","props","location","search","substring","indexOf","axios","method","then","res","data","audios","reverse","setState","userName","usuario","nombre","catch","e","state","className","align","map","audio","key","liga","style","display","controls","src","type","moment","utc","fecha_hora_audio","toDate","local","format","Component","Boolean","window","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAAAA,QAAQC,IAAI,OAAQC,8CAAYC,MACzB,IAAMC,EAAiC,gBAArBF,8CAAYC,KAA0B,6CAA+C,wB,iBCkD/FE,E,6LA9CW,IAAD,OACbC,EAAMC,KAAKC,MAAMC,SAASC,OAC9BJ,EAAMA,EAAIK,UAAUL,EAAIM,QAAQ,KAAK,GACrCZ,QAAQC,IAAR,UAAeG,EAAf,mBAAkCE,IAClCO,IAAM,CACFP,IAAI,GAAD,OAAKF,EAAL,mBAAwBE,GAC3BQ,OAAQ,QACTC,MAAK,SAACC,GACLhB,QAAQC,IAAIe,EAAIC,MAChBD,EAAIC,KAAKC,OAAOC,UAChB,EAAKC,SAAS,CACVC,SAAUL,EAAIC,KAAKK,QAAQ,GAAGC,OAC9BL,OAAQF,EAAIC,KAAKC,YAEtBM,OAAM,SAACC,GACNzB,QAAQC,IAAI,QAASwB,Q,+BAIzB,OAAGlB,KAAKmB,MAEA,yBAAKC,UAAU,OACX,wBAAIA,UAAU,UAAd,cAAmCpB,KAAKmB,MAAML,UAC9C,yBAAKM,UAAU,SAASC,MAAM,QAEtBrB,KAAKmB,MAAMR,OAAOW,KAAI,SAACC,GACnB,OACI,yBAAKC,IAAKD,EAAME,KAAMC,MAAO,CAAEC,QAAS,UACpC,2BAAOP,UAAU,SAASQ,UAAQ,GAC9B,4BACIC,IAAG,yFAAoFN,EAAME,KAA1F,cACHK,KAAK,eAGb,2BAAIC,IAAOA,IAAOC,IAAIT,EAAMU,kBAAkBC,UAAUC,QAAQC,OAAO,qBAShG,kC,GA5CIC,aCQCC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCCD,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWhD,ODJ3B,MAASiD,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.ffbf46db.chunk.js","sourcesContent":["console.log('env:', process.env.tipo);\r\nexport const BASE_URL = (process.env.tipo !== \"development\") ? \"https://seguridad-integrador.herokuapp.com\" : \"http://localhost:4000\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {BASE_URL} from './utils.js';\r\nimport moment from 'moment';\r\nclass Home extends Component {\r\n    componentWillMount() {\r\n        let url = this.props.location.search;\r\n        url = url.substring(url.indexOf('=')+1);\r\n        console.log(`${BASE_URL}/evento/${url}`);\r\n        axios({\r\n            url: `${BASE_URL}/evento/${url}`,\r\n            method: 'get'\r\n        }).then((res) => {\r\n            console.log(res.data);\r\n            res.data.audios.reverse();\r\n            this.setState({\r\n                userName: res.data.usuario[0].nombre,\r\n                audios: res.data.audios\r\n            });\r\n        }).catch((e) => {\r\n            console.log(\"error\", e);\r\n        })\r\n    }\r\n    render() {\r\n        if(this.state){\r\n            return (\r\n                <div className=\"App\">\r\n                    <h1 className=\"Header\">Alertas de {this.state.userName}</h1>\r\n                    <div className=\"Audios\" align=\"left\">\r\n                        {\r\n                            this.state.audios.map((audio) => {\r\n                                return (\r\n                                    <div key={audio.liga} style={{ display: \"block\" }}>\r\n                                        <audio className=\"Player\" controls>\r\n                                            <source\r\n                                                src={`https://firebasestorage.googleapis.com/v0/b/integrador-seguridad.appspot.com/o/${audio.liga}?alt=media`}\r\n                                                type=\"audio/wav\"\r\n                                            />\r\n                                        </audio>\r\n                                        <p>{moment(moment.utc(audio.fecha_hora_audio).toDate()).local().format('hh:mm:ss a')}</p>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return <div></div>\r\n    }\r\n}\r\nexport default Home;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import './App.css';\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Home from './Home';\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/home\" component={Home} />\r\n    </Router>\r\n  );\r\n}\r\n\r\n/*\r\ncd \"C:\\Program Files (x86)\\Google\\Chrome\\Application\" \r\nchrome.exe --user-data-dir=\"C://Chrome dev session\" --disable-web-security\r\n*/"],"sourceRoot":""}